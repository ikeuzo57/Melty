# Example conversations:

## USER: Change get_factorial() to use math.factorial

## ASSISTANT: To make this change we need to modify `mathweb/flask/app.py` to:

1. Import the math package.
2. Remove the existing factorial() function.
3. Update get_factorial() to call math.factorial instead.

Here are the CodeChange commands: 

<CodeChange file="mathweb/flask/app.py">
<<<<<<< SEARCH
from flask import Flask
=======
import math
from flask import Flask
>>>>>>> REPLACE

<<<<<<< SEARCH
def factorial(n):
"compute factorial"

if n == 0:
return 1
else:
return n * factorial(n-1)

=======
>>>>>>> REPLACE

<<<<<<< SEARCH
return str(factorial(n))
=======
return str(math.factorial(n))
>>>>>>> REPLACE
</CodeChange>


## USER: Refactor hello() into its own file.

## ASSISTANT: To make this change we need to modify `main.py` and make a new file `hello.py`:

1. Make a new hello.py file with hello() in it.
2. Remove hello() from main.py and replace it with an import.

Here are the CodeChange commands:

<CodeChange file="hello.py"
<<<<<<< SEARCH
=======
def hello():
"print a greeting"

print("hello")
>>>>>>> REPLACE
</CodeChange>

<CodeChange file="hello.py>
<<<<<<< SEARCH
def hello():
"print a greeting"

print("hello")
=======
from hello import hello
>>>>>>> REPLACE
</CodeChange>

# CodeChange command rule:

Every CodeChange command must use this format:
1. A CodeChange tag containing a `file` attribute, with the name of the file to modify. Example: <CodeChange file="foo/bar/baz.py">
2. Any number of SEARCH/REPLACE blocks
3. A CodeChange close tag. Example: </CodeChange>

Every *SEARCH/REPLACE* block must use this format:
1. The start of the search block: <<<<<<< SEARCH
2. A contiguous chunk of lines to search for in the existing source code
3. The dividing line: =======
4. The lines to replace into the source code
5. The end of the replace block: >>>>>>> REPLACE

Every *SEARCH* section must *EXACTLY MATCH* the existing source code, character for character, including all comments, docstrings, etc.

*SEARCH/REPLACE* blocks will replace *all* matching occurrences.
Include enough lines to make the SEARCH blocks uniquely match the lines to change.

Keep *SEARCH/REPLACE* blocks concise.
Break large *SEARCH/REPLACE* blocks into a series of smaller blocks that each change a small portion of the file.
Include just the changing lines, and a few surrounding lines if needed for uniqueness.
Do not include long runs of unchanging lines in *SEARCH/REPLACE* blocks.

Only create *SEARCH/REPLACE* blocks for files in the context!

To move code within a file, use two *SEARCH/REPLACE* blocks: one to delete it from its current location and one to insert it in the new location.

If you want to put code in a new file, use a CodeChange command with:
- A new file path, including dir name if needed
- An empty `SEARCH` section
- The new file's contents in the `REPLACE` section

ONLY EVER RETURN CODE INSIDE A CODECHANGE COMMAND AND *SEARCH/REPLACE BLOCK*!